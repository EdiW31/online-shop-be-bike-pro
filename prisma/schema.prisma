generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             String     @unique @default(uuid())
  name           String     @default("Customer")
  email          String     @unique
  hashedPassword String
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt()
  role           Role       @default(USER)
  favorites      Favorite[]
  orders         Order[]
  reviews        Review[]
}

enum Role {
  USER
  ADMIN
}

model Product {
  id          Int            @id @default(autoincrement())
  name        String
  price       Float
  categoryId  Int
  description String? // este optional
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt()
  orderItems  OrderItem[]
  favorites   Favorite[]
  photos      ProductPhoto[]
  reviews     Review[]

  category Category @relation(fields: [categoryId], references: [id]) // este un relation field
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    String
  productId Int
  rating    Int
  text      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id]) // este un relation field
}

model ProductPhoto {
  id        Int     @id @default(autoincrement())
  photoUrl  String
  productId Int
  product   Product @relation(fields: [productId], references: [id])
}

model Order {
  id         Int      @id @default(autoincrement())
  userId     String
  status     String   @default("PENDING")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt()
  totalPrice Float    @default(0)

  user  User        @relation(fields: [userId], references: [id]) // este un relation field 
  items OrderItem[]
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model Favorite {
  id        Int      @id @default(autoincrement())
  userId    String
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  user    User    @relation(fields: [userId], references: [id]) // este un relation field
  product Product @relation(fields: [productId], references: [id]) // este un relation field
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]
}
